#ifndef MINO_H_
#define MINO_H_

#include <vector>

class Mino {
 public:
  const std::vector<std::vector<std::vector<int>>> s_;
  Mino();
  explicit Mino(const std::vector<std::vector<std::vector<int>>>& s):s_(s) {
    // printf("%zd %zd %zd\n",s_.size(),s_[0].size(),s_[0][0].size());
  }
  int size() const { return s_.size(); }
  std::vector<std::vector<int>> rotate(int r) const {
    return s_[r];
  }
};

static const std::vector<Mino> mino = {
  Mino({
      {{0, 1, 0}, {1, 1, 1}, {0, 0, 0}},
      {{0, 1, 0}, {0, 1, 1}, {0, 1, 0}},
      {{0, 0, 0}, {1, 1, 1}, {0, 1, 0}},
      {{0, 1, 0}, {1, 1, 0}, {0, 1, 0}},
    }),
  Mino({
      {{1, 0, 0}, {1, 1, 1}, {0, 0, 0}},
      {{0, 1, 1}, {0, 1, 0}, {0, 1, 0}},
      {{0, 0, 0}, {1, 1, 1}, {0, 0, 1}},
      {{0, 1, 0}, {0, 1, 0}, {1, 1, 0}},
    }),
  Mino({
      {{0, 0, 1}, {1, 1, 1}, {0, 0, 0}},
      {{0, 1, 0}, {0, 1, 0}, {0, 1, 1}},
      {{0, 0, 0}, {1, 1, 1}, {1, 0, 0}},
      {{1, 1, 0}, {0, 1, 0}, {0, 1, 0}},
    }),
  Mino({
      {{1, 1, 0}, {0, 1, 1}, {0, 0, 0}},
      {{0, 0, 1}, {0, 1, 1}, {0, 1, 0}},
      {{0, 0, 0}, {1, 1, 0}, {0, 1, 1}},
      {{0, 1, 0}, {1, 1, 0}, {1, 0, 0}},
    }),
  Mino({
      {{0, 1, 1}, {1, 1, 0}, {0, 0, 0}},
      {{0, 1, 0}, {0, 1, 1}, {0, 0, 1}},
      {{0, 0, 0}, {0, 1, 1}, {1, 1, 0}},
      {{1, 0, 0}, {1, 1, 0}, {0, 1, 0}},
    }),
  Mino({
      {{0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}},
      {{0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}},
      {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}},
      {{0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}},
    }),
  Mino({
      {{1, 1}, {1, 1}},
    })
};

#endif  // MINO_H_
